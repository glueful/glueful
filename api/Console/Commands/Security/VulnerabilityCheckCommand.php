<?php

namespace Glueful\Console\Commands\Security;

use Glueful\Console\Commands\Security\BaseSecurityCommand;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Security Vulnerability Check Command
 * - Known vulnerability database checking for dependencies
 * - CVE database integration and reporting
 * - Automated vulnerability patching suggestions
 * - Dependency version analysis and recommendations
 * - Security advisory monitoring and alerts
 * @package Glueful\Console\Commands\Security
 */
#[AsCommand(
    name: 'security:vulnerabilities',
    description: 'Check for known vulnerabilities in dependencies'
)]
class VulnerabilityCheckCommand extends BaseSecurityCommand
{
    protected function configure(): void
    {
        $this->setDescription('Check for known vulnerabilities in dependencies')
             ->setHelp('This command checks dependencies against known vulnerability databases ' .
                      'and provides recommendations for fixes and updates.')
             ->addOption(
                 'update',
                 'u',
                 InputOption::VALUE_NONE,
                 'Update vulnerability database before checking'
             )
             ->addOption(
                 'fix',
                 'f',
                 InputOption::VALUE_NONE,
                 'Attempt to automatically fix vulnerable dependencies'
             )
             ->addOption(
                 'format',
                 null,
                 InputOption::VALUE_REQUIRED,
                 'Output format (json, table, summary)',
                 'table'
             )
             ->addOption(
                 'severity',
                 's',
                 InputOption::VALUE_REQUIRED,
                 'Minimum severity level to report (low, medium, high, critical)',
                 'medium'
             );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->info('Checking for known vulnerabilities in dependencies...');

        try {
            // Run dependency vulnerability check
            $scanner = $this->getService(\Glueful\Security\VulnerabilityScanner::class);
            $results = $scanner->checkDependencyVulnerabilities();

            $vulnerabilityCount = count($results['vulnerabilities']);
            $packagesScanned = $results['scanned_packages'];

            $this->info("Scanned {$packagesScanned} packages");

            if ($vulnerabilityCount > 0) {
                $this->warning("Found {$vulnerabilityCount} vulnerable dependencies:");

                foreach ($results['vulnerabilities'] as $vulnerability) {
                    $this->error("  â€¢ {$vulnerability['package']} {$vulnerability['current_version']}");
                    $this->info("    {$vulnerability['description']}");
                    $this->info("    Recommendation: {$vulnerability['recommendation']}");
                    $this->info("");
                }

                return self::FAILURE;
            }

            $this->success('No known vulnerabilities found in dependencies');
            return self::SUCCESS;
        } catch (\Exception $e) {
            $this->error("Vulnerability check failed: " . $e->getMessage());
            return self::FAILURE;
        }
    }
}
