<?php

declare(strict_types=1);

namespace Glueful\Configuration\Schema;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;

/**
 * Security Configuration Schema
 *
 * Defines validation rules and structure for security configuration including
 * CORS, CSRF, rate limiting, password policies, and audit settings.
 *
 * @package Glueful\Configuration\Schema
 */
class SecurityConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('security');
        $rootNode = $treeBuilder->getRootNode();

        // @phpstan-ignore-next-line TreeBuilder root nodes are ArrayNodeDefinitions in practice
        $rootNode
            ->children()
                ->arrayNode('levels')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->integerNode('flexible')
                            ->defaultValue(1)
                            ->info('Basic token validation only')
                        ->end()
                        ->integerNode('moderate')
                            ->defaultValue(2)
                            ->info('Token + IP address validation')
                        ->end()
                        ->integerNode('strict')
                            ->defaultValue(3)
                            ->info('Token + IP + User Agent validation')
                        ->end()
                    ->end()
                ->end()
                ->integerNode('default_level')
                    ->min(1)
                    ->max(3)
                    ->defaultValue(2)
                    ->info('Default security level (1-3)')
                ->end()
                ->booleanNode('enabled_permissions')
                    ->defaultTrue()
                    ->info('Enable permission system')
                ->end()
                ->integerNode('nanoid_length')
                    ->min(8)
                    ->max(32)
                    ->defaultValue(12)
                    ->info('NanoID length for unique identifiers')
                ->end()
                ->arrayNode('cors')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->variableNode('allowed_origins')
                            ->defaultNull()
                            ->info('Allowed CORS origins (* for all, null to require explicit setting)')
                        ->end()
                        ->arrayNode('allowed_methods')
                            ->scalarPrototype()
                                ->validate()
                                    ->ifNotInArray(['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'])
                                    ->thenInvalid('Invalid HTTP method: %s')
                                ->end()
                            ->end()
                            ->defaultValue(['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'])
                            ->info('Allowed HTTP methods')
                        ->end()
                        ->arrayNode('allowed_headers')
                            ->scalarPrototype()->end()
                            ->defaultValue(['Content-Type', 'Authorization', 'X-Requested-With'])
                            ->info('Allowed request headers')
                        ->end()
                        ->arrayNode('expose_headers')
                            ->scalarPrototype()->end()
                            ->defaultValue(['X-Total-Count', 'X-Page-Count'])
                            ->info('Headers to expose to client')
                        ->end()
                        ->integerNode('max_age')
                            ->min(0)
                            ->defaultValue(86400)
                            ->info('Preflight cache duration in seconds')
                        ->end()
                        ->booleanNode('supports_credentials')
                            ->defaultTrue()
                            ->info('Allow credentials in CORS requests')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('csrf')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultTrue()
                            ->info('Enable CSRF protection')
                        ->end()
                        ->integerNode('tokenLifetime')
                            ->min(300)
                            ->max(86400)
                            ->defaultValue(3600)
                            ->info('CSRF token lifetime in seconds (5min-24h)')
                        ->end()
                        ->booleanNode('useDoubleSubmit')
                            ->defaultFalse()
                            ->info('Use double submit cookie pattern')
                        ->end()
                        ->arrayNode('exemptRoutes')
                            ->scalarPrototype()->end()
                            ->defaultValue([
                                'auth/login',
                                'auth/register',
                                'auth/forgot-password',
                                'auth/reset-password',
                                'auth/verify-email',
                                'auth/verify-otp',
                                'webhooks/*',
                                'public/*',
                                'csrf-token'
                            ])
                            ->info('Routes exempt from CSRF protection')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('headers')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->enumNode('x_frame_options')
                            ->values(['DENY', 'SAMEORIGIN'])
                            ->defaultValue('DENY')
                            ->info('X-Frame-Options header value')
                        ->end()
                        ->enumNode('x_content_type_options')
                            ->values(['nosniff'])
                            ->defaultValue('nosniff')
                            ->info('X-Content-Type-Options header value')
                        ->end()
                        ->scalarNode('x_xss_protection')
                            ->defaultValue('1; mode=block')
                            ->info('X-XSS-Protection header value')
                        ->end()
                        ->scalarNode('strict_transport_security')
                            ->defaultNull()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return $v !== null && !preg_match('/^max-age=\d+/', $v);
                                })
                                ->thenInvalid('HSTS header must start with max-age=')
                            ->end()
                            ->info('Strict-Transport-Security header value')
                        ->end()
                        ->scalarNode('content_security_policy')
                            ->defaultNull()
                            ->info('Content-Security-Policy header value')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('rate_limiter')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enable_adaptive')
                            ->defaultTrue()
                            ->info('Enable adaptive rate limiting')
                        ->end()
                        ->booleanNode('enable_distributed')
                            ->defaultFalse()
                            ->info('Enable distributed rate limiting')
                        ->end()
                        ->booleanNode('enable_ml')
                            ->defaultFalse()
                            ->info('Enable ML-based rate limiting')
                        ->end()
                        ->floatNode('default_behavior_score')
                            ->min(0)
                            ->max(1)
                            ->defaultValue(0.25)
                            ->info('Default behavior score (0-1)')
                        ->end()
                        ->integerNode('sync_interval')
                            ->min(1)
                            ->defaultValue(30)
                            ->info('Sync interval in seconds')
                        ->end()
                        ->integerNode('rule_update_interval')
                            ->min(60)
                            ->defaultValue(3600)
                            ->info('Rule update interval in seconds')
                        ->end()
                        ->integerNode('behavior_ttl')
                            ->min(300)
                            ->defaultValue(86400)
                            ->info('Behavior data TTL in seconds')
                        ->end()
                        ->integerNode('anomaly_ttl')
                            ->min(3600)
                            ->defaultValue(604800)
                            ->info('Anomaly data TTL in seconds')
                        ->end()
                        ->arrayNode('defaults')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('ip')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->integerNode('max_attempts')
                                            ->min(1)
                                            ->defaultValue(30)
                                            ->info('Maximum attempts per IP')
                                        ->end()
                                        ->integerNode('window_seconds')
                                            ->min(1)
                                            ->defaultValue(60)
                                            ->info('Time window in seconds')
                                        ->end()
                                    ->end()
                                ->end()
                                ->arrayNode('user')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->integerNode('max_attempts')
                                            ->min(1)
                                            ->defaultValue(500)
                                            ->info('Maximum attempts per user')
                                        ->end()
                                        ->integerNode('window_seconds')
                                            ->min(1)
                                            ->defaultValue(3600)
                                            ->info('Time window in seconds')
                                        ->end()
                                    ->end()
                                ->end()
                                ->arrayNode('endpoint')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->integerNode('max_attempts')
                                            ->min(1)
                                            ->defaultValue(15)
                                            ->info('Maximum attempts per endpoint')
                                        ->end()
                                        ->integerNode('window_seconds')
                                            ->min(1)
                                            ->defaultValue(60)
                                            ->info('Time window in seconds')
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('password')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->integerNode('min_length')
                            ->min(6)
                            ->max(128)
                            ->defaultValue(8)
                            ->info('Minimum password length (6-128)')
                        ->end()
                        ->booleanNode('require_mixed_case')
                            ->defaultTrue()
                            ->info('Require uppercase and lowercase letters')
                        ->end()
                        ->booleanNode('require_numbers')
                            ->defaultTrue()
                            ->info('Require numeric characters')
                        ->end()
                        ->booleanNode('require_symbols')
                            ->defaultFalse()
                            ->info('Require special characters')
                        ->end()
                        ->integerNode('max_age_days')
                            ->min(1)
                            ->max(365)
                            ->defaultNull()
                            ->info('Maximum password age in days (null for no limit)')
                        ->end()
                        ->integerNode('history_count')
                            ->min(0)
                            ->max(24)
                            ->defaultValue(0)
                            ->info('Number of previous passwords to remember')
                        ->end()
                        ->arrayNode('prohibited_patterns')
                            ->scalarPrototype()->end()
                            ->defaultValue([])
                            ->info('Prohibited password patterns (regex)')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('request_validation')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('allowed_content_types')
                            ->scalarPrototype()->end()
                            ->defaultValue([
                                'application/json',
                                'application/x-www-form-urlencoded',
                                'multipart/form-data'
                            ])
                            ->info('Allowed request content types')
                        ->end()
                        ->scalarNode('max_request_size')
                            ->defaultValue('10MB')
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return !preg_match('/^\d+[KMGT]?B?$/i', $v);
                                })
                                ->thenInvalid('Invalid size format. Use format like "10MB", "1GB"')
                            ->end()
                            ->info('Maximum request size (e.g., "10MB", "1GB")')
                        ->end()
                        ->booleanNode('require_user_agent')
                            ->defaultFalse()
                            ->info('Require User-Agent header')
                        ->end()
                        ->booleanNode('block_suspicious_ua')
                            ->defaultFalse()
                            ->info('Block suspicious User-Agent patterns')
                        ->end()
                        ->arrayNode('suspicious_ua_patterns')
                            ->scalarPrototype()->end()
                            ->defaultValue([
                                '/bot/i',
                                '/crawler/i',
                                '/spider/i',
                                '/scraper/i'
                            ])
                            ->info('Suspicious User-Agent regex patterns')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('jobs')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('allowed_names')
                            ->scalarPrototype()
                                ->validate()
                                    ->ifTrue(function ($v) {
                                        return !preg_match('/^[a-z][a-z0-9_]*[a-z0-9]$/', $v);
                                    })
                                    ->thenInvalid('Job name must match pattern: /^[a-z][a-z0-9_]*[a-z0-9]$/')
                                ->end()
                            ->end()
                            ->defaultValue([
                                'cache_maintenance',
                                'database_backup',
                                'log_cleaner',
                                'notification_retry_processor',
                                'session_cleaner',
                                'archive_cleanup',
                                'metrics_aggregation',
                                'security_scan',
                                'health_check',
                                'queue_maintenance'
                            ])
                            ->info('Allowed job names')
                        ->end()
                        ->booleanNode('auto_allow_scheduled_jobs')
                            ->defaultFalse()
                            ->info('Auto-allow jobs from schedule.php')
                        ->end()
                        ->scalarNode('job_name_pattern')
                            ->defaultValue('/^[a-z][a-z0-9_]*[a-z0-9]$/')
                            ->info('Job name validation pattern')
                        ->end()
                        ->integerNode('max_job_data_size')
                            ->min(1024)
                            ->max(1048576)
                            ->defaultValue(65536)
                            ->info('Maximum job data size in bytes (1KB-1MB)')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('audit')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultTrue()
                            ->info('Enable audit logging')
                        ->end()
                        ->booleanNode('log_failed_logins')
                            ->defaultTrue()
                            ->info('Log failed login attempts')
                        ->end()
                        ->booleanNode('log_permission_denials')
                            ->defaultTrue()
                            ->info('Log permission denials')
                        ->end()
                        ->booleanNode('log_suspicious_activity')
                            ->defaultTrue()
                            ->info('Log suspicious activity')
                        ->end()
                        ->integerNode('retention_days')
                            ->min(30)
                            ->max(2555)
                            ->defaultValue(365)
                            ->info('Audit log retention in days (30-2555)')
                        ->end()
                        ->arrayNode('log_levels')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->enumNode('failed_login')
                                    ->values(['debug', 'info', 'warning', 'error'])
                                    ->defaultValue('warning')
                                    ->info('Log level for failed logins')
                                ->end()
                                ->enumNode('permission_denial')
                                    ->values(['debug', 'info', 'warning', 'error'])
                                    ->defaultValue('info')
                                    ->info('Log level for permission denials')
                                ->end()
                                ->enumNode('suspicious_activity')
                                    ->values(['debug', 'info', 'warning', 'error'])
                                    ->defaultValue('warning')
                                    ->info('Log level for suspicious activity')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('encryption')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->enumNode('default_cipher')
                            ->values(['AES-128-CBC', 'AES-192-CBC', 'AES-256-CBC', 'AES-128-GCM', 'AES-256-GCM'])
                            ->defaultValue('AES-256-CBC')
                            ->info('Default encryption cipher')
                        ->end()
                        ->scalarNode('key_rotation_days')
                            ->defaultNull()
                            ->validate()
                                ->ifTrue(function ($v) {
                                    return $v !== null && ($v < 30 || $v > 365);
                                })
                                ->thenInvalid('Key rotation must be between 30 and 365 days')
                            ->end()
                            ->info('Key rotation interval in days (null to disable)')
                        ->end()
                        ->booleanNode('hash_sensitive_logs')
                            ->defaultTrue()
                            ->info('Hash sensitive data in logs')
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['cors']['supports_credentials'] && $v['cors']['allowed_origins'] === '*';
                })
                ->thenInvalid('CORS credentials cannot be used with wildcard origins')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['csrf']['enabled'] && $v['csrf']['tokenLifetime'] < 300;
                })
                ->thenInvalid('CSRF token lifetime must be at least 300 seconds (5 minutes)')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['rate_limiter']['enable_ml'] && !$v['rate_limiter']['enable_adaptive'];
                })
                ->thenInvalid('ML rate limiting requires adaptive rate limiting to be enabled')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['password']['require_symbols'] && $v['password']['min_length'] < 8;
                })
                ->thenInvalid('Minimum password length should be at least 8 when symbols are required')
            ->end();

        return $treeBuilder;
    }

    public function getConfigurationName(): string
    {
        return 'security';
    }

    public function getDescription(): string
    {
        return 'Security configuration including CORS, CSRF, rate limiting, password policies, and audit settings';
    }

    public function getVersion(): string
    {
        return '1.0.0';
    }
}
