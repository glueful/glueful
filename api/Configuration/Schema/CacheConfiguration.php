<?php

declare(strict_types=1);

namespace Glueful\Configuration\Schema;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;

/**
 * Cache Configuration Schema
 *
 * Defines validation rules and structure for cache configuration including
 * driver settings, stampede protection, edge caching, and distributed caching.
 *
 * @package Glueful\Configuration\Schema
 */
class CacheConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('cache');
        $rootNode = $treeBuilder->getRootNode();

        // @phpstan-ignore-next-line TreeBuilder root nodes are ArrayNodeDefinitions in practice
        $rootNode
            ->children()
                ->enumNode('default')
                    ->values(['redis', 'memcached', 'file'])
                    ->defaultValue('redis')
                    ->info('Default cache driver')
                ->end()
                ->scalarNode('prefix')
                    ->defaultValue('glueful:')
                    ->info('Global cache prefix for key namespacing')
                ->end()
                ->booleanNode('fallback_to_file')
                    ->defaultTrue()
                    ->info('Enable file-based fallback if primary cache fails')
                ->end()
                ->arrayNode('stores')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('redis')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('driver')
                                    ->defaultValue('redis')
                                ->end()
                                ->scalarNode('host')
                                    ->defaultValue('127.0.0.1')
                                    ->info('Redis host')
                                ->end()
                                ->integerNode('port')
                                    ->min(1)
                                    ->max(65535)
                                    ->defaultValue(6379)
                                    ->info('Redis port')
                                ->end()
                                ->scalarNode('password')
                                    ->defaultNull()
                                    ->info('Redis password')
                                ->end()
                                ->integerNode('database')
                                    ->min(0)
                                    ->defaultValue(0)
                                    ->info('Redis database number')
                                ->end()
                                ->floatNode('timeout')
                                    ->min(0)
                                    ->defaultValue(2.5)
                                    ->info('Connection timeout in seconds')
                                ->end()
                                ->integerNode('retry_interval')
                                    ->min(1)
                                    ->defaultValue(100)
                                    ->info('Retry interval in milliseconds')
                                ->end()
                                ->floatNode('read_timeout')
                                    ->min(0)
                                    ->defaultValue(2.5)
                                    ->info('Read timeout in seconds')
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('memcached')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('driver')
                                    ->defaultValue('memcached')
                                ->end()
                                ->scalarNode('host')
                                    ->defaultValue('127.0.0.1')
                                    ->info('Memcached host')
                                ->end()
                                ->integerNode('port')
                                    ->min(1)
                                    ->max(65535)
                                    ->defaultValue(11211)
                                    ->info('Memcached port')
                                ->end()
                                ->integerNode('weight')
                                    ->min(1)
                                    ->defaultValue(100)
                                    ->info('Server weight')
                                ->end()
                                ->scalarNode('persistent_id')
                                    ->defaultNull()
                                    ->info('Persistent connection ID')
                                ->end()
                                ->arrayNode('sasl')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->scalarNode('username')
                                            ->defaultNull()
                                            ->info('SASL username')
                                        ->end()
                                        ->scalarNode('password')
                                            ->defaultNull()
                                            ->info('SASL password')
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('file')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('driver')
                                    ->defaultValue('file')
                                ->end()
                                ->scalarNode('path')
                                    ->cannotBeEmpty()
                                    ->info('File cache directory path')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->integerNode('ttl')
                    ->min(1)
                    ->defaultValue(3600)
                    ->info('Default TTL in seconds')
                ->end()
                ->integerNode('lock_ttl')
                    ->min(1)
                    ->defaultValue(60)
                    ->info('Lock TTL in seconds')
                ->end()
                ->arrayNode('stampede_protection')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultFalse()
                            ->info('Enable cache stampede protection')
                        ->end()
                        ->integerNode('lock_ttl')
                            ->min(1)
                            ->defaultValue(60)
                            ->info('Stampede lock TTL in seconds')
                        ->end()
                        ->integerNode('max_wait_time')
                            ->min(1)
                            ->defaultValue(30)
                            ->info('Maximum wait time in seconds')
                        ->end()
                        ->integerNode('retry_interval')
                            ->min(1)
                            ->defaultValue(100000)
                            ->info('Retry interval in microseconds')
                        ->end()
                        ->arrayNode('early_expiration')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->booleanNode('enabled')
                                    ->defaultFalse()
                                    ->info('Enable early expiration')
                                ->end()
                                ->floatNode('threshold')
                                    ->min(0)
                                    ->max(1)
                                    ->defaultValue(0.8)
                                    ->info('Early expiration threshold (0-1)')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->booleanNode('enable_tags')
                    ->defaultTrue()
                    ->info('Enable cache tags')
                ->end()
                ->enumNode('tags_store')
                    ->values(['redis', 'memcached', 'file'])
                    ->defaultValue('redis')
                    ->info('Store for cache tags')
                ->end()
                ->arrayNode('edge')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultFalse()
                            ->info('Enable edge caching')
                        ->end()
                        ->enumNode('provider')
                            ->values(['cloudflare', 'fastly', 'aws'])
                            ->defaultValue('cloudflare')
                            ->info('Edge cache provider')
                        ->end()
                        ->integerNode('default_ttl')
                            ->min(1)
                            ->defaultValue(3600)
                            ->info('Default edge cache TTL')
                        ->end()
                        ->arrayNode('rules')
                            ->variablePrototype()->end()
                            ->defaultValue([])
                            ->info('Route-specific cache rules')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('distributed')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultFalse()
                            ->info('Enable distributed caching')
                        ->end()
                        ->enumNode('strategy')
                            ->values(['consistent-hashing', 'round-robin', 'random'])
                            ->defaultValue('consistent-hashing')
                            ->info('Distribution strategy')
                        ->end()
                        ->integerNode('replicas')
                            ->min(1)
                            ->defaultValue(2)
                            ->info('Number of replicas')
                        ->end()
                        ->arrayNode('failover')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->booleanNode('enabled')
                                    ->defaultTrue()
                                    ->info('Enable failover')
                                ->end()
                                ->integerNode('timeout')
                                    ->min(1)
                                    ->defaultValue(5)
                                    ->info('Failover timeout in seconds')
                                ->end()
                                ->integerNode('retry_after')
                                    ->min(1)
                                    ->defaultValue(30)
                                    ->info('Retry after seconds')
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('nodes')
                            ->arrayPrototype()
                                ->children()
                                    ->scalarNode('id')
                                        ->isRequired()
                                        ->cannotBeEmpty()
                                        ->info('Node identifier')
                                    ->end()
                                    ->enumNode('driver')
                                        ->values(['redis', 'memcached'])
                                        ->isRequired()
                                        ->info('Cache driver for this node')
                                    ->end()
                                    ->scalarNode('host')
                                        ->isRequired()
                                        ->cannotBeEmpty()
                                        ->info('Node host')
                                    ->end()
                                    ->integerNode('port')
                                        ->min(1)
                                        ->max(65535)
                                        ->isRequired()
                                        ->info('Node port')
                                    ->end()
                                    ->scalarNode('password')
                                        ->defaultNull()
                                        ->info('Node password')
                                    ->end()
                                    ->integerNode('weight')
                                        ->min(1)
                                        ->defaultValue(1)
                                        ->info('Node weight for distribution')
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['enable_tags'] && !in_array($v['tags_store'], ['redis', 'memcached']);
                })
                ->thenInvalid('Cache tags require Redis or Memcached as tags_store')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['distributed']['enabled'] && empty($v['distributed']['nodes']);
                })
                ->thenInvalid('Distributed caching requires at least one node to be configured')
            ->end();

        return $treeBuilder;
    }

    public function getConfigurationName(): string
    {
        return 'cache';
    }

    public function getDescription(): string
    {
        return 'Cache configuration including drivers, stampede protection, and distributed caching';
    }

    public function getVersion(): string
    {
        return '1.0.0';
    }
}
