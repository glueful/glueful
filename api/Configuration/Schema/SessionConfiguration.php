<?php

declare(strict_types=1);

namespace Glueful\Configuration\Schema;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;

/**
 * Session Configuration Schema
 *
 * Defines validation rules and structure for session and JWT token configuration
 * including token lifetimes, security settings, and cleanup policies.
 *
 * @package Glueful\Configuration\Schema
 */
class SessionConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('session');
        $rootNode = $treeBuilder->getRootNode();

        // @phpstan-ignore-next-line TreeBuilder root nodes are ArrayNodeDefinitions in practice
        $rootNode
            ->children()
                ->integerNode('access_token_lifetime')
                    ->min(60)
                    ->max(86400)
                    ->defaultValue(3600)
                    ->info('Access token lifetime in seconds (1 minute to 24 hours)')
                ->end()
                ->integerNode('refresh_token_lifetime')
                    ->min(3600)
                    ->max(31536000)
                    ->defaultValue(604800)
                    ->info('Refresh token lifetime in seconds (1 hour to 1 year)')
                ->end()
                ->integerNode('remember_expiration')
                    ->min(86400)
                    ->max(31536000)
                    ->defaultValue(2592000)
                    ->info('Remember me token lifetime in seconds (1 day to 1 year)')
                ->end()
                ->scalarNode('token_salt')
                    ->isRequired()
                    ->cannotBeEmpty()
                    ->validate()
                        ->ifTrue(function ($v) {
                            return strlen($v) < 32;
                        })
                        ->thenInvalid('Token salt must be at least 32 characters long')
                    ->end()
                    ->info('Strong random salt for token generation (min 32 chars)')
                ->end()
                ->scalarNode('jwt_key')
                    ->isRequired()
                    ->cannotBeEmpty()
                    ->validate()
                        ->ifTrue(function ($v) {
                            return strlen($v) < 64;
                        })
                        ->thenInvalid('JWT key must be at least 64 characters long')
                    ->end()
                    ->info('Strong random key for JWT signing (min 64 chars)')
                ->end()
                ->enumNode('jwt_algorithm')
                    ->values(['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512'])
                    ->defaultValue('HS256')
                    ->info('JWT signing algorithm')
                ->end()
                ->integerNode('cleanup_batch_size')
                    ->min(100)
                    ->max(10000)
                    ->defaultValue(1000)
                    ->info('Batch size for cleanup operations (100-10000)')
                ->end()
                ->arrayNode('cleanup')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->integerNode('revoked_retention_days')
                            ->min(1)
                            ->max(365)
                            ->defaultValue(14)
                            ->info('Days to retain revoked sessions (1-365)')
                        ->end()
                        ->integerNode('expired_retention_days')
                            ->min(1)
                            ->max(90)
                            ->defaultValue(7)
                            ->info('Days to retain expired sessions (1-90)')
                        ->end()
                        ->booleanNode('auto_cleanup_enabled')
                            ->defaultTrue()
                            ->info('Enable automatic session cleanup')
                        ->end()
                        ->integerNode('cleanup_interval_hours')
                            ->min(1)
                            ->max(168)
                            ->defaultValue(24)
                            ->info('Cleanup interval in hours (1-168)')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('providers')
                    ->useAttributeAsKey('name')
                    ->arrayPrototype()
                        ->children()
                            ->scalarNode('class')
                                ->isRequired()
                                ->cannotBeEmpty()
                                ->validate()
                                    ->ifTrue(function ($v) {
                                        return !class_exists($v);
                                    })
                                    ->thenInvalid('Authentication provider class does not exist: %s')
                                ->end()
                                ->info('Authentication provider class')
                            ->end()
                            ->arrayNode('options')
                                ->useAttributeAsKey('name')
                                ->variablePrototype()
                                ->end()
                                ->info('Provider-specific options')
                            ->end()
                            ->booleanNode('enabled')
                                ->defaultTrue()
                                ->info('Enable this authentication provider')
                            ->end()
                        ->end()
                    ->end()
                    ->info('Authentication providers configuration')
                ->end()
                ->arrayNode('security')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('regenerate_on_login')
                            ->defaultTrue()
                            ->info('Regenerate session ID on login')
                        ->end()
                        ->booleanNode('strict_token_validation')
                            ->defaultTrue()
                            ->info('Enable strict token validation')
                        ->end()
                        ->integerNode('max_concurrent_sessions')
                            ->min(1)
                            ->max(100)
                            ->defaultValue(5)
                            ->info('Maximum concurrent sessions per user (1-100)')
                        ->end()
                        ->booleanNode('revoke_on_password_change')
                            ->defaultTrue()
                            ->info('Revoke all sessions on password change')
                        ->end()
                        ->arrayNode('ip_binding')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->booleanNode('enabled')
                                    ->defaultFalse()
                                    ->info('Bind sessions to IP addresses')
                                ->end()
                                ->booleanNode('strict_mode')
                                    ->defaultFalse()
                                    ->info('Strict IP binding (no subnet tolerance)')
                                ->end()
                                ->arrayNode('trusted_proxies')
                                    ->scalarPrototype()->end()
                                    ->defaultValue([])
                                    ->info('Trusted proxy IP addresses')
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('user_agent_binding')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->booleanNode('enabled')
                                    ->defaultFalse()
                                    ->info('Bind sessions to user agent')
                                ->end()
                                ->booleanNode('strict_mode')
                                    ->defaultFalse()
                                    ->info('Strict user agent matching')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('storage')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->enumNode('driver')
                            ->values(['database', 'redis', 'file', 'memory'])
                            ->defaultValue('database')
                            ->info('Session storage driver')
                        ->end()
                        ->scalarNode('table')
                            ->defaultValue('sessions')
                            ->info('Database table for session storage')
                        ->end()
                        ->scalarNode('connection')
                            ->defaultValue('default')
                            ->info('Database connection name')
                        ->end()
                        ->arrayNode('redis')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('host')
                                    ->defaultValue('127.0.0.1')
                                    ->info('Redis host')
                                ->end()
                                ->integerNode('port')
                                    ->min(1)
                                    ->max(65535)
                                    ->defaultValue(6379)
                                    ->info('Redis port')
                                ->end()
                                ->scalarNode('password')
                                    ->defaultNull()
                                    ->info('Redis password')
                                ->end()
                                ->integerNode('database')
                                    ->min(0)
                                    ->defaultValue(1)
                                    ->info('Redis database number')
                                ->end()
                                ->scalarNode('prefix')
                                    ->defaultValue('glueful:session:')
                                    ->info('Redis key prefix')
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('file')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('path')
                                    ->cannotBeEmpty()
                                    ->info('File storage path')
                                ->end()
                                ->integerNode('file_permissions')
                                    ->defaultValue(0600)
                                    ->info('File permissions (octal)')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('monitoring')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultTrue()
                            ->info('Enable session monitoring')
                        ->end()
                        ->booleanNode('track_login_attempts')
                            ->defaultTrue()
                            ->info('Track failed login attempts')
                        ->end()
                        ->integerNode('max_failed_attempts')
                            ->min(3)
                            ->max(20)
                            ->defaultValue(5)
                            ->info('Maximum failed attempts before lockout')
                        ->end()
                        ->integerNode('lockout_duration_minutes')
                            ->min(5)
                            ->max(1440)
                            ->defaultValue(15)
                            ->info('Lockout duration in minutes (5-1440)')
                        ->end()
                        ->booleanNode('log_suspicious_activity')
                            ->defaultTrue()
                            ->info('Log suspicious session activity')
                        ->end()
                        ->arrayNode('alerts')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->booleanNode('enabled')
                                    ->defaultTrue()
                                    ->info('Enable security alerts')
                                ->end()
                                ->booleanNode('multiple_locations')
                                    ->defaultTrue()
                                    ->info('Alert on sessions from multiple locations')
                                ->end()
                                ->booleanNode('unusual_devices')
                                    ->defaultTrue()
                                    ->info('Alert on unusual device usage')
                                ->end()
                                ->booleanNode('concurrent_sessions')
                                    ->defaultTrue()
                                    ->info('Alert on excessive concurrent sessions')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['access_token_lifetime'] >= $v['refresh_token_lifetime'];
                })
                ->thenInvalid('Access token lifetime must be shorter than refresh token lifetime')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['refresh_token_lifetime'] > $v['remember_expiration'];
                })
                ->thenInvalid('Refresh token lifetime should not exceed remember me expiration')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['security']['ip_binding']['enabled'] &&
                           $v['security']['ip_binding']['strict_mode'] &&
                           !empty($v['security']['ip_binding']['trusted_proxies']);
                })
                ->thenInvalid('Trusted proxies should not be used with strict IP binding mode')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['storage']['driver'] === 'redis' &&
                           empty($v['storage']['redis']['host']);
                })
                ->thenInvalid('Redis host is required when using Redis storage driver')
            ->end()
            ->validate()
                ->ifTrue(function ($v) {
                    return $v['storage']['driver'] === 'file' &&
                           empty($v['storage']['file']['path']);
                })
                ->thenInvalid('File path is required when using file storage driver')
            ->end();

        return $treeBuilder;
    }

    public function getConfigurationName(): string
    {
        return 'session';
    }

    public function getDescription(): string
    {
        return 'Session and JWT token configuration including lifetimes, security, and storage settings';
    }

    public function getVersion(): string
    {
        return '1.0.0';
    }
}
