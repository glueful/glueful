# Symfony EventDispatcher Migration Plan for Glueful

## Overview
Replace Glueful's custom EventDispatcher with Symfony EventDispatcher for better standardization, DI integration, and enhanced extension system capabilities.

## Current State Analysis
- **Custom EventDispatcher**: `api/Events/EventDispatcher.php` (feature-rich with wildcards, priorities, one-time listeners)
- **Queue EventDispatcher**: `api/Queue/Events/EventDispatcher.php` (simpler implementation)
- **Active Usage**: Notification system, queue plugins, extension system
- **Dependencies**: Already uses Symfony components (routing, http-foundation)

## Migration Strategy: Direct Replacement

Since backward compatibility is not required, we can perform a clean migration with modern patterns.

### Phase 1: Foundation Setup (Week 1)
**Goal**: Install Symfony EventDispatcher and create adapter layer

#### Tasks:
1. **Add Symfony EventDispatcher dependency**
   ```bash
   composer require symfony/event-dispatcher
   ```

2. **Create Event Classes**
   ```php
   // api/Events/
   ├── Auth/
   │   ├── SessionCreatedEvent.php
   │   ├── SessionDestroyedEvent.php
   │   ├── AuthenticationFailedEvent.php
   │   └── RateLimitExceededEvent.php
   ├── Cache/
   │   ├── CacheHitEvent.php
   │   ├── CacheMissEvent.php
   │   └── CacheInvalidatedEvent.php
   ├── Database/
   │   ├── EntityCreatedEvent.php
   │   ├── EntityUpdatedEvent.php
   │   └── QueryExecutedEvent.php
   ├── Http/
   │   ├── RequestEvent.php
   │   ├── ResponseEvent.php
   │   └── ExceptionEvent.php
   └── System/
       ├── MemoryWarningEvent.php
       ├── PerformanceThresholdEvent.php
       └── ExtensionLoadedEvent.php
   ```

3. **Create Service Provider**
   ```php
   // api/DI/ServiceProviders/EventServiceProvider.php
   class EventServiceProvider extends ServiceProvider
   {
       public function register(): void
       {
           // Register Symfony EventDispatcher
           $this->container->singleton(EventDispatcherInterface::class, function() {
               return new SymfonyEventDispatcher();
           });
           
           // Register event listeners
           $this->registerEventListeners();
       }
   }
   ```

4. **Update DI Container Registration**
   - Add EventServiceProvider to bootstrap.php
   - Replace custom EventDispatcher injections

### Phase 2: Core System Migration (Week 2)
**Goal**: Migrate notification and authentication systems

#### 2.1 Notification System Migration
**Files to Update**:
- `api/Notifications/Services/NotificationDispatcher.php:8,43,63` (replace import and usage)
- `api/Notifications/Events/` (update event classes to extend Symfony Event)

**Changes**:
```php
// Before
use Glueful\Events\EventDispatcher;

// After  
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Contracts\EventDispatcher\Event;

class NotificationSent extends Event
{
    public function __construct(
        private Notification $notification,
        private Notifiable $notifiable, 
        private string $channel
    ) {}
}
```

#### 2.2 Authentication & Security Events
**New Event Integration Points**:
- `api/Auth/TokenStorageService.php:storeSession()` → `SessionCreatedEvent`
- `api/Security/SecurityManager.php` → `RateLimitExceededEvent`, `AuthFailedEvent`
- `api/Controllers/Traits/AsyncAuditTrait.php` → `AuditEvent`

### Phase 3: Extension System Enhancement (Week 3)
**Goal**: Upgrade extension system with Symfony EventSubscriber pattern

#### 3.1 Extension Base Class Updates
**File**: `api/Extensions.php:82-98`

**Before**:
```php
public static function getEventListeners(): array { return []; }
public static function getEventSubscribers(): array { return []; }
```

**After**:
```php
public static function getEventSubscribers(): array
{
    return [
        SessionCreatedEvent::class => ['onSessionCreated', 100],
        UserCreatedEvent::class => ['onUserCreated', 50],
        'cache.invalidated' => 'onCacheInvalidated'
    ];
}
```

#### 3.2 Extension Auto-Registration
**Create**: `api/Extensions/EventSubscriberRegistry.php`
```php
class EventSubscriberRegistry 
{
    public function registerExtensionSubscribers(EventDispatcherInterface $dispatcher): void
    {
        foreach ($this->loadedExtensions as $extension) {
            $subscribers = $extension::getEventSubscribers();
            foreach ($subscribers as $eventClass => $method) {
                $dispatcher->addListener($eventClass, [$extension, $method]);
            }
        }
    }
}
```

### Phase 4: Advanced Integration (Week 4)
**Goal**: Implement request/response lifecycle and database events

#### 4.1 HTTP Lifecycle Events
**Files to Update**:
- `api/Http/Middleware/MiddlewareDispatcher.php` 
- `api/Controllers/BaseController.php`

**New Events**:
```php
// Before request processing
$dispatcher->dispatch(new RequestEvent($request));

// After response creation  
$dispatcher->dispatch(new ResponseEvent($request, $response));

// On exceptions
$dispatcher->dispatch(new ExceptionEvent($request, $exception));
```

#### 4.2 Database Operation Events
**File**: `api/Repository/BaseRepository.php`

**Integration Points**:
```php
// In CRUD operations
public function create(array $data): mixed 
{
    $entity = $this->db->insert($this->table, $data);
    $this->eventDispatcher->dispatch(new EntityCreatedEvent($entity, $this->table));
    return $entity;
}
```

#### 4.3 Cache Invalidation Automation
**File**: `api/Cache/CacheInvalidationService.php`

**Event Listeners**:
```php
class CacheInvalidationListener
{
    public function onEntityUpdated(EntityUpdatedEvent $event): void
    {
        $patterns = $this->getCachePatterns($event->getTable());
        foreach ($patterns as $pattern) {
            $this->cache->invalidatePattern($pattern);
        }
    }
}
```

### Phase 5: Cleanup & Optimization (Week 5)
**Goal**: Remove old implementations and optimize performance

#### 5.1 Remove Custom EventDispatcher
**Files to Delete**:
- `api/Events/EventDispatcher.php`
- `api/Queue/Events/EventDispatcher.php`

#### 5.2 Update Queue System
**File**: `api/Queue/Plugins/PluginManager.php`
- Replace queue-specific EventDispatcher with Symfony's
- Update plugin event registration

#### 5.3 Performance Optimization
- Configure event dispatcher for production (compiled listeners)
- Add event profiling in debug mode
- Implement event caching where appropriate

## Implementation Details

### Event Naming Conventions
```php
// Domain.Action pattern
'auth.session_created'
'auth.login_failed' 
'cache.hit'
'cache.invalidated'
'database.entity_created'
'http.request_started'
'performance.memory_warning'
```

### Event Subscriber Pattern
```php
class MyExtensionSubscriber implements EventSubscriberInterface
{
    public static function getSubscribedEvents(): array
    {
        return [
            'auth.session_created' => ['onSessionCreated', 100],
            'cache.invalidated' => 'onCacheInvalidated',
            EntityUpdatedEvent::class => ['onEntityUpdated', 50]
        ];
    }
}
```

### DI Integration
```php
// Auto-tag event subscribers
$this->container->registerForAutoconfiguration(EventSubscriberInterface::class)
    ->addTag('event_subscriber');

// Auto-register tagged services
foreach ($this->container->findTaggedServiceIds('event_subscriber') as $id => $tags) {
    $dispatcher->addSubscriber($this->container->get($id));
}
```

## Expected Benefits

### 1. **Enhanced Extension System**
- Standardized event subscription pattern
- Better IDE support and debugging
- Automatic extension event registration

### 2. **Improved Cross-System Integration**
- Automatic cache invalidation on data changes
- Unified audit logging across all components  
- Decoupled security event handling

### 3. **Better Developer Experience**
- Industry-standard event patterns
- Rich debugging tools (Symfony Profiler integration)
- Comprehensive documentation and examples

### 4. **Performance Improvements**
- Compiled event listeners in production
- Better memory management
- Optimized event dispatching

## Risk Mitigation

### 1. **Testing Strategy**
- Comprehensive unit tests for all new event classes
- Integration tests for event flows
- Performance benchmarks before/after migration

### 2. **Rollback Plan**
Since we're not maintaining backward compatibility:
- Feature flags for new event system
- Staged deployment with monitoring
- Database migration scripts for any schema changes

### 3. **Documentation**
- Update CLAUDE.md with new event patterns
- Create extension development guide
- Add event debugging instructions

## Timeline Summary

| Week | Focus | Deliverables |
|------|-------|-------------|
| 1 | Foundation | Symfony setup, base event classes, DI integration |
| 2 | Core Migration | Notification & auth system events |  
| 3 | Extensions | Enhanced extension event system |
| 4 | Advanced | HTTP lifecycle, database events, cache automation |
| 5 | Cleanup | Remove old code, optimize, document |

**Total Duration**: 5 weeks
**Risk Level**: Medium (well-defined scope, clear benefits)
**Breaking Changes**: Yes (custom EventDispatcher removal)